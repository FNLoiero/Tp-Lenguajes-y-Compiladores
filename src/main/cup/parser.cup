package lyc.compiler;

import java_cup.runtime.*;

class Parser;


// Terminals
terminal ID;
terminal CTE_ENTERA;
terminal CTE_FLOTANTE;
terminal CTE_CADENA;

terminal OP_SUMA;
terminal OP_RESTA;
terminal OP_MULT;
terminal OP_DIV;
terminal OP_ASIG;
terminal COMP_MEN;
terminal COMP_MAY;

terminal OP_COMA;
terminal PAR_ABRIR;
terminal PAR_CERRAR;
terminal LLAVE_ABRIR;
terminal LLAVE_CERRAR;
terminal OP_PUNTOS;

terminal IF;
terminal ELSE;
terminal WHILE;
terminal AND;
terminal OR;
terminal NOT;
terminal WRITE;
terminal READ;
terminal INIT;

terminal DT_FLOAT;
terminal DT_INT;
terminal DT_STRING;

// Terminales especiales
terminal EQUAL_EXPRESSIONS;
terminal IS_ZERO;

// Non Terminals

    //Comunes
    non terminal programa;
    non terminal instruccion;
    non terminal serie_de_instrucciones;
    non terminal instruccion_normal;
    non terminal asignacion;
    non terminal constante;
    non terminal tipo_dato;

    //INIT
    non terminal init; 
    non terminal declaraciones;    
    non terminal listado_variables;

    //Aritmeticos
    non terminal instruccion_aritmetica;
    non terminal operacion;
    non terminal termino;
    non terminal factor;     

    //Condicionales
    non terminal instruccion_condicional;
    non terminal if;
    non terminal while;
    non terminal condicion;
    non terminal operacion_logica;
    non terminal else_opcional;
    non terminal expresion_logica;
    non terminal comparador;

    //Especiales
    non terminal instruccion_especial;
    non terminal parametros_operaciones;
    non terminal operation_equal_expressions;
    non terminal operation_is_zero;

    //Entrada y salida
    non terminal instruccion_entrada_salida;
    non terminal read;
    non terminal write;
    non terminal parametro_write;
//

// Start Symbol Definition

start with programa;

programa ::= serie_de_instrucciones {: System.out.println("FIN"); :};
serie_de_instrucciones ::= instruccion | serie_de_instrucciones instruccion;

//Tipos de instrucciones

    instruccion ::=  instruccion_normal | instruccion_condicional 
                    | instruccion_entrada_salida | instruccion_especial;
    instruccion_normal ::= asignacion | init;    
    instruccion_condicional ::= if | while;
    instruccion_entrada_salida ::= read | write;
    instruccion_especial ::= operation_equal_expressions | operation_is_zero;

//Operaciones detalladas

    //----------- Instrucciones normales

    asignacion ::= ID OP_ASIG ID {: System.out.println("Se asigno el ID correctamente");:}
                 | ID OP_ASIG constante {: System.out.println("Se asigno el ID correctamente");:}
                 | ID OP_ASIG operacion {: System.out.println("Se asigno el ID correctamente");:}
                 | ID OP_ASIG operation_equal_expressions {: System.out.println("Se asigno el equal expressions");:}
                 | ID OP_ASIG operation_is_zero {: System.out.println("Se asigno el operation is zero");:};

                 
    constante ::= CTE_ENTERA {: System.out.println("Entero usado");:}
                | CTE_FLOTANTE {: System.out.println("Flotante usado");:}
                | CTE_CADENA {: System.out.println("Cadena usada");:};

    tipo_dato ::= DT_ENTERA {: System.out.println("Tipo Entero usado");:}
                | DT_FLOTANTE {: System.out.println("Tipo Flotante usado");:}
                | DT_CADENA {: System.out.println("Tipo Cadena usada");:};

    init ::= INIT LLAVE_ABRIR declaraciones LLAVE_CERRAR{:System.out.println("Bloque INIT");:};

    declaraciones ::=  listado_variables OP_PUNTOS tipo_dato | declaraciones listado_variables OP_PUNTOS tipo_dato;

    listado_variables ::= ID {: System.out.println("Se hace una inicialización");:} 
                        | listado_variables OP_COMA ID {: System.out.println("Se hace una inicialización");:};

    //----------- Aritmetica

    operacion ::= operacion OP_SUMA termino {: System.out.println("Suma");:}
            | operacion OP_RESTA termino {:System.out.println("Resta");:};    
            | termino;

    termino ::= termino OP_MULT factor {: System.out.println("Multiplicación");:}
            | termino OP_DIV factor{: System.out.println("División");:}
            | factor;

    factor ::= constante
             | ID {: System.out.println("Id: " + id);:};

    //----------- Instrucciones condicional

    if ::= IF PAR_ABRIR condicion PAR_CERRAR  {: System.out.println("IF");:}
        LLAVE_ABRIR serie_de_instrucciones LLAVE_CERRAR
        else_opcional;

    else_opcional ::= ELSE 
                      LLAVE_ABRIR serie_de_instrucciones LLAVE_CERRAR {: System.out.println("FIN ELSE");:}
                      |
                      | ELSE if {: System.out.println("ELSE IF");:};

    while ::= WHILE PAR_ABRIR condicion PAR_CERRAR LLAVE_ABRIR serie_de_instrucciones LLAVE_CERRAR {: System.out.println("WHILE"); :};


    condicion ::= expresion_logica {:System.out.println("Expresión");:}
                | NOT expresion_logica {:System.out.println("NOT");:};


    expresion_logica ::= operacion comparador operacion //Al usar operación permite ID y constantes pero tambien resultado de cuentas
                    | operacion comparador operacion AND operacion comparador operacion                        
                    | operacion comparador operacion OR operacion comparador operacion;

    comparador ::= COMP_MEN {: System.out.println("Operador menor");:}
                 | COMP_MAY {: System.out.println("Operador mayor");:};


    //----------- Instrucciones entrada y salida
    read ::= READ PAR_ABRIR ID PAR_CERRAR {: System.out.println("Se hizo una lectura");:};
    write ::= WRITE PAR_ABRIR parametro_write PAR_CERRAR {: System.out.println("Se hizo una escritura");:};
    parametro_write ::= ID | CTE_CADENA;

    //----------- Instrucciones especiales

    parametros_operaciones ::= operacion | parametros_operaciones OP_COMA operacion;

    operation_equal_expressions ::= PAR_ABRIR parametros_operaciones PAR_CERRAR {: System.out.println("Se hizo Equal Expression");:};
    
    operation_is_zero ::= PAR_ABRIR operacion PAR_CERRAR {: System.out.println("Se hizo Is Zero");:};
